openapi: 3.0.3
info:
  title: Consent Info API
  description: |

    The Consent Info API allows an API Consumer to verify the Consent status of a particular User for that API Consumer (identified by `client_id` from the access token) concerning requested scope(s) and a specific Purpose. It helps determine if Consent is legally required for these parameters. If Consent is necessary but not yet granted, or if it has expired, the API can provide a URL pointing to the API Provider's Consent capture channel. This enables the API Consumer to direct the User to grant or renew Consent in a secure and trusted environment.

    # Introduction

    The primary function of this API is to enable API Consumers to ascertain a User's Consent preferences before attempting to access or process their personal data via other APIs. By providing a standardized way to check Consent, this API facilitates compliance with privacy regulations and promotes transparency with users. Key inputs include the specific scope(s) of access being requested, the purpose for data processing, and an identifier for the User (either explicitly provided or derived from a three-legged access token). The API responds with the current Consent status, the applicable legal basis for data processing, and, if appropriate and requested, a URL for the User to manage their Consent.

    # Relevant terms and definitions

    * **Consent**: An explicit opt-in action that the User takes to allow processing of Personal Data. Consent grants the API Consumer access to a set of scopes related to the User for a specific Purpose.
    * **Purpose**: The reason for which Personal Data will be processed by an API Consumer. CAMARA defines a standard set of Purposes which can be used by API Consumers to specify the reason for their intended Personal Data processing.
    * **Scope**: A string representing the specific access rights or actions an API Consumer requests from the User for their data (e.g., "location-verification:verify"). A request can contain multiple scopes.
    * **Legal Basis**: The justification under data protection law for processing personal data. This API uses terms from the W3C Data Privacy Vocabulary (DPV), such as `dpv:Consent`, `dpv:LegitimateInterest`, `dpv:Contract`, etc., to indicate the relevant legal ground.

    # API Functionality

    This API enables an API Consumer to determine whether user Consent (or another valid legal basis) is in place for the requested actions, based on the provided scope(s) and Purpose, and for the specific API Consumer making the request. NOTE: The response may contain multiple `consentInfo` array items, for instance, if the requested scopes pertain to different underlying services or require distinct legal assessments (e.g., some scopes rely on `dpv:Consent` while others rely on `dpv:LegitimateInterest`).

    Specifically, the API:

    * Determines the need for Consent or other Legal Basis: Evaluates whether user Consent or another legal justification is necessary according to the specified parameters (scopes, Purpose, API Consumer) and relevant legal requirements.
    * Provides the current Consent status and Legal Basis: If a legal basis is required, the API returns its current status (e.g., `READY`, `PENDING`, `REVOKED`, `EXPIRED`) and the specific type of `legalBasis` (e.g., `dpv:Consent`, `dpv:LegitimateInterest`).
    * Offers a Consent Capture URL: If the API Consumer sets `requestCaptureUrl` to `true` in the request, and if the user needs to provide or renew Consent (e.g., the status is `PENDING` or `EXPIRED` for a `dpv:Consent` legal basis), the API supplies the API Provider's Consent capture URL.

    Importantly, this API does NOT delegate Consent capture to the API Consumer but rather empowers the API Consumer to present the API Provider's Consent capture URL at the most opportune time and place. The actual Consent capture occurs within the API Provider's secure environment, ensuring the User's authentication with the API Provider.

    # Authorization and authentication

    The "Camara Security and Interoperability Profile" provides details of how an API consumer requests an access token. Please refer to Identity and Consent Management (https://github.com/camaraproject/IdentityAndConsentManagement/) for the released version of the profile.

    The specific authorization flows to be used will be agreed upon during the onboarding process, happening between the API consumer and the API provider, taking into account the declared purpose for accessing the API, whilst also being subject to the prevailing legal framework dictated by local legislation.

    In cases where personal data is processed by the API and users can exercise their rights through mechanisms such as opt-in and/or opt-out, the use of three-legged access tokens is mandatory. This ensures that the API remains in compliance with privacy regulations, upholding the principles of transparency and user-centric privacy-by-design.

    # Identifying the phone number from the access token

    This API requires the API consumer to identify a phone number as the subject of the API as follows:
    - When the API is invoked using a two-legged access token, the subject will be identified from the optional `phoneNumber` field, which therefore MUST be provided.
    - When a three-legged access token is used however, this optional identifier MUST NOT be provided, as the subject will be uniquely identified from the access token.

    This approach simplifies API usage for API consumers using a three-legged access token to invoke the API by relying on the information that is associated with the access token and was identified during the authentication process.

    ## Error handling:

    - If the subject cannot be identified from the access token and the optional `phoneNumber` field is not included in the request, then the server will return an error with the `422 MISSING_IDENTIFIER` error code.

    - If the subject can be identified from the access token and the optional `phoneNumber` field is also included in the request, then the server will return an error with the `422 UNNECESSARY_IDENTIFIER` error code. This will be the case even if the same phone number is identified by these two methods, as the server is unable to make this comparison.

    # Further info and support

    (FAQs will be added in a later version of the documentation)
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: wip
  x-camara-commonalities: 0.5
servers:
  - url: '{apiRoot}/consent-info/vwip'
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root, defined by the service provider, e.g. `api.example.com` or `api.example.com/somepath`
tags:
  - name: Verify Consent Status
    description: Create a request to verify the Consent status
paths:
  /verify:
    post:
      summary: Create a request to verify the Consent status
      description: |
        Create a request to verify the Consent status of a specific User to the API Consumer for the requested scope(s) and Purpose. The API Consumer is identified by the `client_id` parameter deduced from the access token.
      operationId: verifyConsentStatus
      security:
        - openId:
            - consent-info:verify
      tags:
        - Verify Consent Status
      parameters:
        - $ref: '#/components/parameters/x-correlator'
      requestBody:
        required: true
        description:
          Consent status verification request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyConsentStatusRequestBody"
            examples:
              ONE_SCOPE_ONE_API:
                summary: One scope
                description: |
                  Request with one scope corresponding to one API
                value:
                  phoneNumber: "+123456789"
                  scopes:
                    - "location-verification:verify"
                  purpose: "dpv:FraudPreventionAndDetection"
                  requestCaptureUrl: true
              MULTIPLE_SCOPES_ONE_API:
                summary: Multiple scopes for one API
                description: |
                  Request with multiple scopes corresponding to one API
                value:
                  phoneNumber: "+123456789"
                  scopes:
                    - "quality-on-demand:sessions:create"
                    - "quality-on-demand:sessions:read"
                    - "quality-on-demand:sessions:update"
                    - "quality-on-demand:sessions:delete"
                    - "quality-on-demand:sessions:retrieve-by-device"
                  purpose: "dpv:RequestedServiceProvision"
                  requestCaptureUrl: true
              MULTIPLE_SCOPES_MULTIPLE_APIS:
                summary: Multiple scopes for multiple APIs
                description: |
                  Request with multiple scopes corresponding to multiple APIs
                value:
                  phoneNumber: "+123456789"
                  scopes:
                    - "location-verification:verify"
                    - "device-roaming-status:read"
                  purpose: "dpv:FraudPreventionAndDetection"
                  requestCaptureUrl: true
      responses:
        "200":
          description: OK
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyConsentStatusResponseBody"
              examples:
                READY_FOR_PROCESSING:
                  summary: Ready for processing
                  description: |
                    Data processing is allowed for the requested scope(s) and Purpose.
                  value:
                    consentInfo:
                      - scopes:
                          - "number-verification:verify"
                        purpose: "dpv:FraudPreventionAndDetection"
                        legalBasis: "dpv:LegitimateInterest"
                        status: READY
                CONSENT_REQUIRED:
                  summary: Consent is required
                  description: |
                    Consent is required for the requested scope(s) and Purpose
                  value:
                    consentInfo:
                      - scopes:
                          - "location-verification:verify"
                        purpose: "dpv:FraudPreventionAndDetection"
                        legalBasis: "dpv:Consent"
                        status: PENDING
                CONSENT_REQUIRED_CAPTURE_URL:
                  summary: Consent is required and capture URL is provided
                  description: |
                    Consent is required for the requested scope(s) and Purpose but it is not provided by the User. The API Provider provides a Consent capture URL.
                  value:
                    consentInfo:
                      - scopes:
                          - "location-verification:verify"
                        purpose: "dpv:FraudPreventionAndDetection"
                        legalBasis: "dpv:Consent"
                        status: EXPIRED
                        expirationDate: '2023-07-03T14:27:08.312+02:00'
                    captureUrl: 'https://example.org/consent-capture-url'
                CONSENT_REVOKED:
                  summary: Consent is revoked
                  description: |
                    Consent is revoked for the requested scope(s) and Purpose.
                  value:
                    consentInfo:
                      - scopes:
                          - "location-verification:verify"
                        purpose: "dpv:FraudPreventionAndDetection"
                        legalBasis: "dpv:Consent"
                        status: REVOKED
                LEGITIMATE_INTEREST_OPT_OUT:
                  summary: Legitimate interest opt-out
                  description: |
                    The User has opted out of the legitimate interest for the requested scope(s) and Purpose.
                  value:
                    consentInfo:
                      - scopes:
                          - "number-verification:verify"
                        purpose: "dpv:FraudPreventionAndDetection"
                        legalBasis: "dpv:LegitimateInterest"
                        status: REVOKED
                MULTIPLE_SCOPES_ONE_API:
                  summary: Multiple scopes for one API
                  description: |
                    Request with multiple scopes corresponding to one API.
                  value:
                    consentInfo:
                      - scopes:
                          - "quality-on-demand:sessions:create"
                          - "quality-on-demand:sessions:read"
                          - "quality-on-demand:sessions:update"
                          - "quality-on-demand:sessions:delete"
                          - "quality-on-demand:sessions:retrieve-by-device"
                        purpose: "dpv:RequestedServiceProvision"
                        legalBasis: "dpv:Contract"
                        status: READY
                MULTIPLE_SCOPES_MULTIPLE_APIS:
                  summary: Multiple scopes for multiple APIs
                  description: |
                    Request with multiple scopes corresponding to multiple APIs.
                  value:
                    consentInfo:
                      - scopes:
                          - "location-verification:verify"
                        purpose: "dpv:FraudPreventionAndDetection"
                        legalBasis: "dpv:Consent"
                        status: PENDING
                      - scopes:
                          - "device-roaming-status:read"
                        purpose: "dpv:FraudPreventionAndDetection"
                        legalBasis: "dpv:Consent"
                        status: PENDING
                    captureUrl: 'https://example.org/consent-capture-url'
                MULTIPLES_SCOPES_ONE_API_DIFFERENT_STATUS:
                  summary: Multiple scopes for one API with different status
                  description: |
                    Request with multiple scopes corresponding to one API. Different status for each scope.
                  value:
                    consentInfo:
                      - scopes:
                          - "sim-swap:check"
                        purpose: "dpv:FraudPreventionAndDetection"
                        legalBasis: "dpv:LegitimateInterest"
                        status: READY
                      - scopes:
                          - "sim-swap:retrieve-date"
                        purpose: "dpv:FraudPreventionAndDetection"
                        legalBasis: "dpv:LegitimateInterest"
                        status: REVOKED
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/verifyConsentStatus403"
        "404":
          $ref: "#/components/responses/Generic404"
        "422":
          $ref: "#/components/responses/Generic422"
components:
  headers:
    x-correlator:
      description: Correlation id for the different services
      schema:
        type: string
        pattern: ^[a-zA-Z0-9-]{0,55}$
  parameters:
    x-correlator:
      name: x-correlator
      in: header
      description: Correlation id for the different services
      schema:
        type: string
        pattern: ^[a-zA-Z0-9-]{0,55}$
        example: "b4333c46-49c0-4f62-80d7-f0ef930f1c46"
  schemas:
    PhoneNumber:
      type: string
      description: A public identifier addressing a telephone subscription. In mobile networks it corresponds to the MSISDN (Mobile Station International Subscriber Directory Number). In order to be globally unique it has to be formatted in international format, according to E.164 standard, prefixed with '+'.
      pattern: '^\+[1-9][0-9]{4,14}$'
      example: "+123456789"
    VerifyConsentStatusRequestBody:
      type: object
      description: |
        The request body for the Consent status verification request. It contains the requested scope(s), the Purpose for which the API Consumer intends to process the User's Personal Data, a flag indicating whether the API Consumer requests a Consent capture URL and optionally the phone number of the User. The phone number is required when the API is invoked using a two-legged access token, but MUST NOT be provided when a three-legged access token is used, as the subject will be uniquely identified from the access token.
      required:
        - scopes
        - purpose
        - requestCaptureUrl
      properties:
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        scopes:
          $ref: "#/components/schemas/Scopes"
        purpose:
          $ref: "#/components/schemas/Purpose"
        requestCaptureUrl:
          type: boolean
          description: |
            A boolean flag indicating whether the API Consumer requests API Provider to return a Consent capture URL.
            * `true` - If set to `true` the API will include a `captureUrl` in the response body if applicable.
            * `false` - The API will omit the Consent capture URL from the response.
          example: true
    Scopes:
      type: array
      minItems: 1
      items:
        type: string
      description: |
        List of requested scopes. The scope is a string that represents the access rights that the API Consumer is requesting from the User.
      example:
        - "location-verification:verify"
    Purpose:
      type: string
      description: |
        The reason for which Personal Data will be processed by the API Consumer. CAMARA defines a standard set of Purposes which can be used by API Consumers to specify the reason for their intended Personal Data processing.
      example: "dpv:FraudPreventionAndDetection"
    VerifyConsentStatusResponseBody:
      type: object
      required:
        - consentInfo
      properties:
        consentInfo:
          $ref: "#/components/schemas/consentInfo"
        captureUrl:
          type: string
          format: url
          description: |
            URL where the User can provide the necessary Consent. This field is only present if requested by the API Consumer and if `consentInfo[*].legalBasis` is `dpv:Consent` and its `consentInfo[*].status` is `PENDING` or `EXPIRED`.
          example: 'https://example.org/consent-capture-url'
    consentInfo:
      type: array
      description: |
        The consentInfo contains the information about the Consent status for the requested scope(s) and Purpose. It may be required more than one array item for the requested scope(s) and Purpose, e.g. when the requested scopes are related to multiple APIs.
      items:
        $ref: "#/components/schemas/consentInfoObject"
      minItems: 1
    consentInfoObject:
      type: object
      required:
        - scopes
        - purpose
        - legalBasis
        - status
      properties:
        scopes:
          $ref: "#/components/schemas/Scopes"
        purpose:
          $ref: "#/components/schemas/Purpose"
        legalBasis:
          type: string
          description: |
              The applicable legal basis for the requested scope(s) and Purpose. It uses terms from the W3C [Data Privacy Vocabulary](https://w3c.github.io/dpv/2.1/) (DPV).
          enum:
            - dpv:Consent
            - dpv:LegitimateInterest
            - dpv:Contract
            - dpv:LegalObligation
            - dpv:PublicInterest
            - dpv:VitalInterest
        status:
          type: string
          enum:
            - PENDING
            - READY
            - REVOKED
            - EXPIRED
          description: |
              Shows the current validity of the specified `legalBasis` for processing data related to the indicated scope(s) and Purpose.
              It signals if processing is currently allowed and offers a general indication if it is not, if its validity is time-bound, or if it has ceased.
              Possible values are:
              - `PENDING`: The specified `legalBasis` is not yet established or fully validated for the requested data processing.
                           For example, the user has not yet provided Consent under `dpv:Consent` legal basis.
              - `READY`: The specified `legalBasis` is currently valid and permits the requested data processing.
                         For example, necessary user Consent has been obtained, a legitimate interests assessment resulted in a positive outcome without overriding objections, or the processing is deemed necessary under an existing contract.
              - `REVOKED`: Where applicable (primarily for `dpv:Consent` and `dpv:LegitimateInterest`), the user has actively withdrawn their permission, or the previously valid `legalBasis` is no longer considered so due to user action.
                           This includes revocation of Consent or a successful objection (opt-out) to processing based on legitimate interest.
              - `EXPIRED`: Where applicable, the validity of the `legalBasis` for data processing has ceased due to the passage of time or a pre-defined condition.
                           This is common for time-limited Consents or could apply to other bases if their applicability was time-bound.
        expirationDate:
          type: string
          format: date-time
          description: |
             The date and time at which the validity of this `legalBasis` is set to expire or has expired.
             It applies mainly to time-limited legal bases, such as `dpv:Consent`, or others where a specific duration of validity is defined. This field is only present if `status` is `READY` (indicating a future expiration if applicable) or `EXPIRED` (indicating the past expiration date). It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone. Recommended format is yyyy-MM-dd'T'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z).
          example: '2023-07-03T14:27:08.312+02:00'
    ErrorInfo:
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          type: integer
          description: HTTP response status code
        code:
          type: string
          description: Friendly Code to describe the error
        message:
          type: string
          description: A human readable description of what the event represent
  responses:
    Generic400:
      description: Bad Request
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 400
                  code:
                    enum:
                      - INVALID_ARGUMENT
          examples:
            GENERIC_400_INVALID_ARGUMENT:
              description: Invalid Argument. Generic Syntax Exception
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: Client specified an invalid argument, request body or query param.
    Generic401:
      description: Unauthorized
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 401
                  code:
                    enum:
                      - UNAUTHENTICATED
          examples:
            GENERIC_401_UNAUTHENTICATED:
              description: Request cannot be authenticated
              value:
                status: 401
                code: UNAUTHENTICATED
                message: Request not authenticated due to missing, invalid, or expired credentials.
    verifyConsentStatus403:
      description: Forbidden
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 403
                  code:
                    enum:
                      - PERMISSION_DENIED
                      - CONSENT_INFO.NOT_ALLOWED_SCOPES
                      - CONSENT_INFO.CAPTURE_FREQUENCY_EXCEEDED
          examples:
            GENERIC_403_PERMISSION_DENIED:
              description: Permission denied. OAuth2 token access does not have the required scope or when the user fails operational security
              value:
                status: 403
                code: PERMISSION_DENIED
                message: Client does not have sufficient permissions to perform this action.
            NOT_ALLOWED_SCOPES:
              description: The requested scope(s) and Purpose combination is not allowed for the API Consumer, e.g. the API Consumer has not onboarded the appropriate API(s) with the API Provider for the declared Purpose.
              value:
                status: 403
                code: CONSENT_INFO.NOT_ALLOWED_SCOPES
                message: The requested scope(s) and Purpose combination is not allowed for this API Consumer.
            CAPTURE_FREQUENCY_EXCEEDED:
              description: The frequency of consent capture requests has been exceeded.
              value:
                status: 403
                code: CONSENT_INFO.CAPTURE_FREQUENCY_EXCEEDED
                message: The frequency of consent capture requests has been exceeded. Please try again later.
    Generic404:
      description: Not found
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 404
                  code:
                    enum:
                      - NOT_FOUND
                      - IDENTIFIER_NOT_FOUND
          examples:
            GENERIC_404_NOT_FOUND:
              description: Resource is not found
              value:
                status: 404
                code: NOT_FOUND
                message: The specified resource is not found.
            GENERIC_404_IDENTIFIER_NOT_FOUND:
              description: Some identifier cannot be matched to a device
              value:
                status: 404
                code: IDENTIFIER_NOT_FOUND
                message: Phone number not found.
    Generic422:
      description: Unprocessable Content
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 422
                  code:
                    enum:
                      - SERVICE_NOT_APPLICABLE
                      - MISSING_IDENTIFIER
                      - UNNECESSARY_IDENTIFIER
          examples:
            GENERIC_422_SERVICE_NOT_APPLICABLE:
              description: Service not applicable for the provided identifier
              value:
                status: 422
                code: SERVICE_NOT_APPLICABLE
                message: The service is not available for the provided phone number.
            GENERIC_422_MISSING_IDENTIFIER:
              description: An identifier is not included in the request and the device or phone number identification cannot be derived from the 3-legged access token
              value:
                status: 422
                code: MISSING_IDENTIFIER
                message: The phone number cannot be identified.
            GENERIC_422_UNNECESSARY_IDENTIFIER:
              description: An explicit identifier is provided when a device or phone number has already been identified from the access token
              value:
                status: 422
                code: UNNECESSARY_IDENTIFIER
                message: The phone number is already identified by the access token.
  securitySchemes:
    openId:
      type: openIdConnect
      openIdConnectUrl: https://example.org/.well-known/openid-configuration
